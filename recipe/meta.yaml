{% set version = "1.7.0.1" %}

{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.2").split(".")[0] | int %}
{% endif %}

{% set platform = "linux-x86_64" %}    # [linux64]
{% set platform = "linux-ppc64le" %}   # [ppc64le]
{% set platform = "linux-sbsa" %}      # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}     # [win]

package:
  name: cutensor
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cutensor/redist/libcutensor/{{ platform }}/libcutensor-{{ platform }}-{{ version }}-archive.{{ extension }}
  sha256: dd3557891371a19e73e7c955efe5383b0bee954aba6a30e4892b0e7acb9deb26  # [linux64]
  sha256: af4ad5e29dcb636f1bf941ed1fd7fc8053eeec4813fbc0b41581e114438e84c8  # [ppc64le]
  sha256: c31f8e4386539434a5d1643ebfed74572011783b4e21b62be52003e3a9de3720  # [aarch64]
  sha256: cdbb53bcc1c7b20ee0aa2dee781644a324d2d5e8065944039024fe22d6b822ab  # [win64]

build:
  number: 2
  skip: true  # [win32 or osx or cuda_compiler_version not in ("11.2", "12.0")]
  script:
    - mkdir -p $PREFIX/include                                             # [linux]
    - mv include/* $PREFIX/include/                                        # [linux]
    - mkdir -p $PREFIX/lib                                                 # [linux]
    - mv lib/{{ cuda_major }}/*.so* $PREFIX/lib/                           # [linux]

    - copy include\\cutensor.h %LIBRARY_INC%\\                             # [win64]
    - copy include\\cutensorMg.h %LIBRARY_INC%\\                           # [win64]
    - mkdir %LIBRARY_INC%\\cutensor                                        # [win64]
    - copy include\\cutensor\\types.h %LIBRARY_INC%\\cutensor              # [win64]
    - del lib\\{{ cuda_major }}\\*static*                                  # [win64]
    - copy lib\\{{ cuda_major }}\\*.dll %LIBRARY_BIN%\\                    # [win64]
    - copy lib\\{{ cuda_major }}\\*.lib %LIBRARY_LIB%\\                    # [win64]
  run_exports:
    - {{ pin_subpackage('cutensor') }}
  ignore_run_exports:
    - cudatoolkit  # [(cuda_compiler_version or "").startswith("11")]
  missing_dso_whitelist:
    - "*/libcuda.so.*"    # [linux]
    - "*/nvcuda.dll"      # [win]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}
    - arm-variant * {{ arm_variant_type }}  # [aarch64]
    - sysroot_{{ target_platform }} 2.17    # [linux]
  host:
    - patchelf >=0.12  # [linux]
    - cuda-version {{ cuda_major }}.0
    - libcublas  # [(cuda_compiler_version or "").startswith("12")]
  run:
    - {{ pin_compatible("cuda-version", max_pin="x") }}
    - cudatoolkit >=11.1,<12  # [(cuda_compiler_version or "").startswith("11")]
    - libcublas               # [(cuda_compiler_version or "").startswith("12")]
  run_constrained:
    # Only GLIBC_2.17 or older symbols present
    - __glibc >=2.17      # [linux]
    - arm-variant * {{ arm_variant_type }}  # [aarch64]

test:
  requires:
    - git
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}
    - sysroot_{{ target_platform }} 2.17  # [linux]
    # make sure we pick up the version matching the docker,
    # or the linker would complain 
    - cudatoolkit {{ cuda_compiler_version }}  # [(cuda_compiler_version or "").startswith("11")]
    # need the libcuda stub for import test
    - cuda-driver-dev                          # [(cuda_compiler_version or "").startswith("12")]
  files:
    - test_load_elf.c        # [linux]

about:
  home: https://developer.nvidia.com/cutensor
  license: LicenseRef-cuTENSOR-Software-License-Agreement
  license_url: https://docs.nvidia.com/cuda/cutensor/license.html
  license_file: LICENSE
  summary: Tensor Linear Algebra on NVIDIA GPUs
  description: |
    The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear
    algebra library providing tensor contraction, reduction and elementwise
    operations. cuTENSOR is used to accelerate applications in the areas of
    deep learning training and inference, computer vision, quantum chemistry
    and computational physics.

    License Agreements:- The packages are governed by the NVIDIA cuTENSOR
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuTENSOR EULA -
    https://docs.nvidia.com/cuda/cutensor/license.html
  doc_url: https://docs.nvidia.com/cuda/cutensor/index.html
  dev_url: https://developer.nvidia.com/cutensor/downloads

extra:
  recipe-maintainers:
    - JeremyWangNVDA
    - leofang
    - jakirkham
    - mtjrider
